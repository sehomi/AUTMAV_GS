// Generated by gencpp from file AUTMAV_msgs/ColorTrackingMsg.msg
// DO NOT EDIT!


#ifndef AUTMAV_MSGS_MESSAGE_COLORTRACKINGMSG_H
#define AUTMAV_MSGS_MESSAGE_COLORTRACKINGMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace AUTMAV_msgs
{
template <class ContainerAllocator>
struct ColorTrackingMsg_
{
  typedef ColorTrackingMsg_<ContainerAllocator> Type;

  ColorTrackingMsg_()
    : h_min(0)
    , h_max(0)
    , s_min(0)
    , s_max(0)
    , v_min(0)
    , v_max(0)  {
    }
  ColorTrackingMsg_(const ContainerAllocator& _alloc)
    : h_min(0)
    , h_max(0)
    , s_min(0)
    , s_max(0)
    , v_min(0)
    , v_max(0)  {
  (void)_alloc;
    }



   typedef int16_t _h_min_type;
  _h_min_type h_min;

   typedef int16_t _h_max_type;
  _h_max_type h_max;

   typedef int16_t _s_min_type;
  _s_min_type s_min;

   typedef int16_t _s_max_type;
  _s_max_type s_max;

   typedef int16_t _v_min_type;
  _v_min_type v_min;

   typedef int16_t _v_max_type;
  _v_max_type v_max;




  typedef boost::shared_ptr< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ColorTrackingMsg_

typedef ::AUTMAV_msgs::ColorTrackingMsg_<std::allocator<void> > ColorTrackingMsg;

typedef boost::shared_ptr< ::AUTMAV_msgs::ColorTrackingMsg > ColorTrackingMsgPtr;
typedef boost::shared_ptr< ::AUTMAV_msgs::ColorTrackingMsg const> ColorTrackingMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace AUTMAV_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'AUTMAV_msgs': ['/home/hojat/GS_WS/src/AUTMAV_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9de6c33710153c49fda47d8c06e265f5";
  }

  static const char* value(const ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9de6c33710153c49ULL;
  static const uint64_t static_value2 = 0xfda47d8c06e265f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AUTMAV_msgs/ColorTrackingMsg";
  }

  static const char* value(const ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 h_min\n\
int16 h_max\n\
int16 s_min\n\
int16 s_max\n\
int16 v_min\n\
int16 v_max\n\
";
  }

  static const char* value(const ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.h_min);
      stream.next(m.h_max);
      stream.next(m.s_min);
      stream.next(m.s_max);
      stream.next(m.v_min);
      stream.next(m.v_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ColorTrackingMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::AUTMAV_msgs::ColorTrackingMsg_<ContainerAllocator>& v)
  {
    s << indent << "h_min: ";
    Printer<int16_t>::stream(s, indent + "  ", v.h_min);
    s << indent << "h_max: ";
    Printer<int16_t>::stream(s, indent + "  ", v.h_max);
    s << indent << "s_min: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s_min);
    s << indent << "s_max: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s_max);
    s << indent << "v_min: ";
    Printer<int16_t>::stream(s, indent + "  ", v.v_min);
    s << indent << "v_max: ";
    Printer<int16_t>::stream(s, indent + "  ", v.v_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTMAV_MSGS_MESSAGE_COLORTRACKINGMSG_H
