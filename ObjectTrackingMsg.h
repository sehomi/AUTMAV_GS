// Generated by gencpp from file AUTMAV_msgs/ObjectTrackingMsg.msg
// DO NOT EDIT!


#ifndef AUTMAV_MSGS_MESSAGE_OBJECTTRACKINGMSG_H
#define AUTMAV_MSGS_MESSAGE_OBJECTTRACKINGMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace AUTMAV_msgs
{
template <class ContainerAllocator>
struct ObjectTrackingMsg_
{
  typedef ObjectTrackingMsg_<ContainerAllocator> Type;

  ObjectTrackingMsg_()
    : object_dir()
    , method()
    , object_size_gain(0.0)
    , colored_or_grayscale(false)  {
    }
  ObjectTrackingMsg_(const ContainerAllocator& _alloc)
    : object_dir(_alloc)
    , method(_alloc)
    , object_size_gain(0.0)
    , colored_or_grayscale(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_dir_type;
  _object_dir_type object_dir;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _method_type;
  _method_type method;

   typedef float _object_size_gain_type;
  _object_size_gain_type object_size_gain;

   typedef uint8_t _colored_or_grayscale_type;
  _colored_or_grayscale_type colored_or_grayscale;




  typedef boost::shared_ptr< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectTrackingMsg_

typedef ::AUTMAV_msgs::ObjectTrackingMsg_<std::allocator<void> > ObjectTrackingMsg;

typedef boost::shared_ptr< ::AUTMAV_msgs::ObjectTrackingMsg > ObjectTrackingMsgPtr;
typedef boost::shared_ptr< ::AUTMAV_msgs::ObjectTrackingMsg const> ObjectTrackingMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace AUTMAV_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'AUTMAV_msgs': ['/home/hojat/GS_WS/src/AUTMAV_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f838e49ad948b60b2bc99c4a0a13bd88";
  }

  static const char* value(const ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf838e49ad948b60bULL;
  static const uint64_t static_value2 = 0x2bc99c4a0a13bd88ULL;
};

template<class ContainerAllocator>
struct DataType< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AUTMAV_msgs/ObjectTrackingMsg";
  }

  static const char* value(const ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string object_dir\n\
string method\n\
float32 object_size_gain\n\
bool colored_or_grayscale\n\
";
  }

  static const char* value(const ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_dir);
      stream.next(m.method);
      stream.next(m.object_size_gain);
      stream.next(m.colored_or_grayscale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectTrackingMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::AUTMAV_msgs::ObjectTrackingMsg_<ContainerAllocator>& v)
  {
    s << indent << "object_dir: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_dir);
    s << indent << "method: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.method);
    s << indent << "object_size_gain: ";
    Printer<float>::stream(s, indent + "  ", v.object_size_gain);
    s << indent << "colored_or_grayscale: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.colored_or_grayscale);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTMAV_MSGS_MESSAGE_OBJECTTRACKINGMSG_H
