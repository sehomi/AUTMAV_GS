/* Auto-generated by genmsg_cpp for file /home/hojat/WS/sandbox/Marvel/msg/Server.msg */
#ifndef MARVEL_MESSAGE_SERVER_H
#define MARVEL_MESSAGE_SERVER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Vangaurd
{
template <class ContainerAllocator>
struct Server_ {
  typedef Server_<ContainerAllocator> Type;

  Server_()
  : armed(false)
  , ready(false)
  , ap_rate(0.0)
  , ap_heading(0.0)
  , ap_climb(0.0)
  {
  }

  Server_(const ContainerAllocator& _alloc)
  : armed(false)
  , ready(false)
  , ap_rate(0.0)
  , ap_heading(0.0)
  , ap_climb(0.0)
  {
  }

  typedef uint8_t _armed_type;
  uint8_t armed;

  typedef uint8_t _ready_type;
  uint8_t ready;

  typedef float _ap_rate_type;
  float ap_rate;

  typedef float _ap_heading_type;
  float ap_heading;

  typedef float _ap_climb_type;
  float ap_climb;


  typedef boost::shared_ptr< ::Marvel::Server_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Marvel::Server_<ContainerAllocator>  const> ConstPtr;
}; // struct Server
typedef  ::Marvel::Server_<std::allocator<void> > Server;

typedef boost::shared_ptr< ::Marvel::Server> ServerPtr;
typedef boost::shared_ptr< ::Marvel::Server const> ServerConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Marvel::Server_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Marvel::Server_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Marvel

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Marvel::Server_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Marvel::Server_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Marvel::Server_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b122f79197f66f90bd23abf0441062d8";
  }

  static const char* value(const  ::Marvel::Server_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb122f79197f66f90ULL;
  static const uint64_t static_value2 = 0xbd23abf0441062d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::Marvel::Server_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Marvel/Server";
  }

  static const char* value(const  ::Marvel::Server_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Marvel::Server_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool armed\n\
bool ready\n\
\n\
float32 ap_rate\n\
float32 ap_heading\n\
float32 ap_climb\n\
\n\
";
  }

  static const char* value(const  ::Marvel::Server_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Marvel::Server_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Marvel::Server_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.armed);
    stream.next(m.ready);
    stream.next(m.ap_rate);
    stream.next(m.ap_heading);
    stream.next(m.ap_climb);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Server_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Marvel::Server_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Marvel::Server_<ContainerAllocator> & v) 
  {
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
    s << indent << "ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready);
    s << indent << "ap_rate: ";
    Printer<float>::stream(s, indent + "  ", v.ap_rate);
    s << indent << "ap_heading: ";
    Printer<float>::stream(s, indent + "  ", v.ap_heading);
    s << indent << "ap_climb: ";
    Printer<float>::stream(s, indent + "  ", v.ap_climb);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MARVEL_MESSAGE_SERVER_H

