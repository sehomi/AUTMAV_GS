/* Auto-generated by genmsg_cpp for file /home/hojat/WS/sandbox/Marvel/msg/State.msg */
#ifndef MARVEL_MESSAGE_STATE_H
#define MARVEL_MESSAGE_STATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Vangaurd
{
template <class ContainerAllocator>
struct State_ {
  typedef State_<ContainerAllocator> Type;

  State_()
  : heading(0.0)
  , rate_r(0.0)
  , v_z(0.0)
  {
  }

  State_(const ContainerAllocator& _alloc)
  : heading(0.0)
  , rate_r(0.0)
  , v_z(0.0)
  {
  }

  typedef float _heading_type;
  float heading;

  typedef float _rate_r_type;
  float rate_r;

  typedef float _v_z_type;
  float v_z;


  typedef boost::shared_ptr< ::Marvel::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Marvel::State_<ContainerAllocator>  const> ConstPtr;
}; // struct State
typedef  ::Marvel::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::Marvel::State> StatePtr;
typedef boost::shared_ptr< ::Marvel::State const> StateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Marvel::State_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Marvel::State_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Marvel

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Marvel::State_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Marvel::State_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Marvel::State_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3c4077d21c70b3ac5c4a6853eccb6ee6";
  }

  static const char* value(const  ::Marvel::State_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3c4077d21c70b3acULL;
  static const uint64_t static_value2 = 0x5c4a6853eccb6ee6ULL;
};

template<class ContainerAllocator>
struct DataType< ::Marvel::State_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Marvel/State";
  }

  static const char* value(const  ::Marvel::State_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Marvel::State_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 heading\n\
float32 rate_r\n\
float32 v_z\n\
\n\
\n\
";
  }

  static const char* value(const  ::Marvel::State_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Marvel::State_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Marvel::State_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.heading);
    stream.next(m.rate_r);
    stream.next(m.v_z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct State_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Marvel::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Marvel::State_<ContainerAllocator> & v) 
  {
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "rate_r: ";
    Printer<float>::stream(s, indent + "  ", v.rate_r);
    s << indent << "v_z: ";
    Printer<float>::stream(s, indent + "  ", v.v_z);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MARVEL_MESSAGE_STATE_H

